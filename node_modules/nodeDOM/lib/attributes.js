(function () {
	"use strict";
	var CONSTANTS = require('./constants.js');

	function sortStr (str) {
		return (str + '').split(' ').sort().join(' ');
	}

	function DOMTokenList (text) {
		if (text) {
			text = text.split(' ');
			for (var i = 0, l = text.length; i < l; ++i)
				this.add(text[i]);
		}
	}

	var proto = DOMTokenList.prototype;

	proto.add = function (token) {
		for (var i = 0, l = this.length; i < l; ++i)
			if (token === this[i])
				return;
		Array.prototype.push.call(this, token);
	};
	proto.contains = function (token) {
		for (var i = 0, l = this.length; i < l; ++i)
			if (token === this[i])
				return true;
		return false;
	};
	proto.item = function (index) {
		return this[index] || null;
	};
	proto.remove = function (token) {
		for (var i = 0, l = this.length; i < l; ++i)
			if (token === this[i]) {
				Array.prototype.splice.call(this, i, 1);
				return;
			}
	};
	proto.toggle = function (token) {
		for (var i = 0, l = this.length; i < l; ++i)
			if (token === this[i]) {
				this.remove(token);
				return;
			}
		this.add(token);
	};
	Object.defineProperty(proto, 'toString', {
		value: function () {
			var str = [];
			for (var i = 0, l = this.length; i < l; ++i)
				str.push(this[i]);
			return str.join(' ');
		}, writable: false, enumerable: false, configurable: false
	});

	function Attribute (name, value) {
		Object.defineProperties(this, {
			'localName': {value: name, writable: false, enumerable: true, configurable: false},
			'nodeType': {value: CONSTANTS.ATTRIBUTE_NODE, writable: false, enumerable: true, configurable: false},
			'name': {get: function () {return this.localName;}, enumerable: true, configurable: false},
			'namespaceURI': {value: null, writable: false, enumerable: true, configurable: false},
			'prefix': {value: null, writable: false, enumerable: true, configurable: false},
			'_value': {value: sortStr(value), writable: true, enumerable: false, configurable: false},
			'value': {get: function () {return this._value;}, set: function (v) {this._value = sortStr(v);}, enumerable: true, configurable: false},
			'nodeValue': {get: function () {return this._value;}, set: function (v) {this.value = v;}, enumerable: true, configurable: false},
			'toString': {value: function () {return [this.localName, '\"' + this.value + '\"'].join('=');}, writable: false, enumerable: false, configurable: false}
		});
	}

	function Attributes () {

	}

	Object.defineProperties(Attributes.prototype, {
		'get': {value: function (name) {return this[name];}, writable: false, enumerable: false, configurable: false},
		'getClassList': {
			value: function () {
				var list = new DOMTokenList(this['class'] ? this['class'].value : ''),
				    self = this;
				list._add = list.add;
				list.add = function (token) {
					this._add(token);
					self.set('class', this.toString());
				};
				list._remove = list.remove;
				list.remove = function (token) {
					this._remove(token);
					self.set('class', this.toString());
				};
				return list;
			}
		},
		'remove': {
			value: function (name) {
				if (!(name in this))
					return;
				delete this[name];
				for (var i = 0, l = this.length; i < l; ++i)
					if (this[i].localName === name) {
						Array.prototype.splice.call(this, i, 1);
						return;
					}
			},
			writable: false,
			enumerable: false,
			configurable: false
		},
		'set': {
			value: function (name, value) {
				var attr = new Attribute(name, value);
				if (!(name in this)) {
					Array.prototype.push.call(this, attr);
					this.sort();
				} else {
					for (var i = 0, l = this.length; i < l; ++i)
						if (this[i].localName === name)
							this[i] = attr;
				}
				this[name] = attr;
				return this;
			},
			writable: false,
			enumerable: false,
			configurable: false
		},
		'sort': {
			value: function () {
				Array.prototype.sort.call(this, function (a, b) {
					a = a.localName;
					b = b.localName;
					return a < b ? -1 : a > b ? 1 : 0;
				});
			},
			writable: false,
			enumerable: false,
			configurable: false
		},
		'toString': {
			value: function () {
				this.sort();
				return Array.prototype.join.call(this, ' ');
			},
			writable: false,
			enumerable: false,
			configurable: false
		}
	});
	module.exports = Attributes;
})()