(function () {
	"use strict";

	var CONSTANTS = require('./constants.js');
	var Node = require('./node.js');

	function Text (value) {
		var node = new Node(value, CONSTANTS.TEXT_NODE);
		for (var key in node) {
			if(!node.hasOwnProperty(key) && !{childNodes: 1, firstChild: 1, lastChild: 1}[key])
				continue;
			Object.defineProperty(this, key, Object.getOwnPropertyDescriptor(node, key));
		}
		Object.defineProperties(this, {
			'data': {
				get: function () {return this.nodeValue},
				set: function (text) {this.nodeValue = text},
				enumerable: true,
				configurable: false
			},
			'length': {
				get: function () {
					return this.nodeValue.length;
				},
				enumerable: true,
				configurable: false
			},
			'wholeText': {
				get: function () {
					if (this.previousSibling && this.previousSibling.nodeType === CONSTANTS.TEXT_NODE)
						return this.previousSibling.wholeText;
					var text = [this.data],
					    e = this;
					while ((e = e.nextSibling) && e.nodeType === CONSTANTS.TEXT_NODE)
						text.push(e.data);
					return test.join('');
				},
				enumerable: true,
				configurable: false
			}
		});
	}

	for (var key in Node.prototype)
		if (!{appendChild: 1, hasChildNodes: 1, insertBefore: 1, normalize: 1, removeChild: 1, replaceChild: 1}[key])
			Object.defineProperty(Text.prototype, key, Object.getOwnPropertyDescriptor(Node.prototype, key));
		
	Object.defineProperty(Text.prototype, 'toString', Object.getOwnPropertyDescriptor(Node.prototype, 'toString'));

	module.exports = Text;
})()