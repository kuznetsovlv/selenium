(function () {
	"use strict";

	var CONSTANTS = require('./constants.js');
	var Node = require('./node.js');
	var FrozenArr = require('./frozenarr.js');
	var Attributes = require('./attributes.js');
	var DataSet = require('./dataset.js');

	function Element (tag, type) {
		var node = new Node(tag, type || CONSTANTS.ELEMENT_NODE);
		for (var key in node) {
			if(!node.hasOwnProperty(key))
				continue;
			Object.defineProperty(this, key, Object.getOwnPropertyDescriptor(node, key));
		}
		Object.defineProperties(this, {
			'attributes': {value: new Attributes(), writable: false, enumerable: true, configurable: false},
			'childElementCount': {get: function () {return this.children.length}, enumerable: true, configurable: false},
			'children': {get: function () {
				var elements = new FrozenArr(),
				    nodes = this.childNodes;
				for (var i = 0, l = nodes.length; i < l; ++i) {
					var node = nodes[i];
					if (node.nodeType === CONSTANTS.ELEMENT_NODE)
						elements.push(node);
				}
				return elements.clear();
			}, enumerable: true, configurable: false},
			'classList': {get: function () {return this.attributes.getClassList();}, enumerable: true, configurable: false},
			'className': {
				get: function () {
					return this.classList.toString();
				},
				set: function (str) {
					this.attributes.set('class', str);
				},
				enumerable: true,
				configurable: false
			},
			'dataset': {
				get: function () {return new DataSet(this);},
				set: function (data) {
					var attrs = this.attributes,
					    _data = {};
					for (var key in data)
						_data[key] = data[key];
					for (var key in attrs)
						if (/^data\-\w+$/.test(key))
							attrs.remove(key);
					for (var key in _data)
						attrs.set(['data', key].join('-'), _data[key]);
				},
				enumerable: true,
				configurable: false
			},
			'firstElementChild': {get: function () {return this.children[0] || null;}, enumerable: true, configurable: false},
			'id': {
				get: function () {
					return this.attributes.id.value || null;
				},
				set: function (id) {
					this.attributes.set('id', id);
				},
				enumerable: true,
				configurable: false
			},
			'innerHTML': {
				get: function () {
					var str = [];
					for (var i = 0, l = this.childNodes.length; i < l; ++i)
						str.push(this.childNodes[i].toString());
					return str.join('');
				},
				enumerable: true,
				configurable: false
			},
			'lastElementChild': {get: function () {return this.children.last || null;}, enumerable: true, configurable: false},
			'localName': {get: function () {return this.tag;}, enumerable: true, configurable: false},
			'nextElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'outerHTML': {get: function () {return this.toString();}, enumerable: true, configurable: false},
			'previousElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) - 1] || null;
			}, enumerable: true, configurable: false},
			'tagName': {get: function () {return this.nodeName;}, enumerable: true, configurable: false},
			'title': {
				get: function () {
					var t = this.attributes.get('title');
					return t ? t.value : '';
				},
				set: function (title) {
					this.attributes.set('title', title);
				},
				enumerable: true,
				configurable: false
			}
		});
	}

	for (var key in Node.prototype)
		Object.defineProperty(Element.prototype, key, Object.getOwnPropertyDescriptor(Node.prototype, key));

	Object.defineProperties(Element.prototype, {
		'getAttribute': {
			value: function (qualifiedName) {
				var attr = this.attributes.get(qualifiedName);
				return attr ? attr.value : null;
			},
			writable: false,
			enumerable: true,
			configurable: false
		},
		'getElementsByClassName': {
			value: function (classNames) {
				_classNames = classNames.split(' ');
				var res = [];
				m: for (var i = 0, l = this.children.length; i < l; ++i) {
					var elem = this.children[i],
					    classList = elem.classList;
					for (var j = 0, n = _classNames.length; j < n; ++j)
						if (!classList.contains(_classNames[j]))
							break m;
					res.push(elem);
					res = res.concat(elem.getElementsByClassName(classNames));
				}
				return res;
			},
			writable: false,
			enumerable: true,
			configurable: false
		},
		'getElementsByTagName': {
			value: function (qualifiedName) {
				var res = [];
				for (var i = 0, l = this.children.length; i < l; ++i) {
					var elem = this.children[i];
					if (elem.tag === qualifiedName)
						res.push(elem);
					res = res.concat(elem.getElementsByTagName(qualifiedName));
				}
				return res;
			},
			writable: false,
			enumerable: true,
			configurable: false
		},
		'hasAttribute': {
			value: function (qualifiedName) {
				return !!this.attributes[qualifiedName];
			},
			writable: false,
			enumerable: true,
			configurable: false
		},
		'insertAdjacentHTML': {
			value: function (position, text) {
				text = new Text(text);
				switch (position) {
					case 'beforebegin': this.parentNode.insertBefore(text, this); break;
					case 'afterend': this.parentNode.insertBefore(text, this.nextSibling); break;
					case 'afterbegin': this.insertBefore(text, this.firstChild); break;
					case 'beforeend': this.appendChild(text); break;
				}
			},
			writable: false,
			enumerable: true,
			configurable: false
		},
		'removeAttribute': {
			value: function (qualifiedName) {
				if (qualifiedName.toLowerCase() === 'classname')
					qualifiedName = 'class';
				this.attributes.remove(qualifiedName);
				if (qualifiedName.toLowerCase() === 'class')
					qualifiedName = 'className';
				if (!{id: 1, className: 1, title: 1}[qualifiedName])
					delete this[qualifiedName];
			},
			writable: false,
			enumerable: true,
			configurable: false
		},
		'setAttribute': {
			value: function (qualifiedName, value) {
				if (qualifiedName.toLowerCase() === 'classname')
					qualifiedName = 'class';
				this.attributes.set(qualifiedName, value);
				if (qualifiedName.toLowerCase() === 'class')
					qualifiedName = 'className';
				if (!{id: 1, className: 1, title: 1}[qualifiedName])
					Object.defineProperty(this, qualifiedName, {
						get: function () {return this.attributes[qualifiedName].value},
						set: function (value) {this.attributes.set(qualifiedName, value)},
						enumerable: true,
						configurable: true
					});
			}
		},
		'toString': Object.getOwnPropertyDescriptor(Node.prototype, 'toString')
	});

	module.exports = Element;
})()