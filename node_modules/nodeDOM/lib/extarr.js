(function () {
	"use strict";

	function ExtArr () {
		Object.defineProperties(this, {
			'last': {
				get: function () {return this[this.length - 1] || undefined;},
				set: function (v) {this[this.length - 1] = v;},
				enumerable: false,
				configurable: false
			},
			'remove': {
				value: function (v) {
					if (typeof v !== 'number')
						v = this.indexOf(v);
					if (v < 0 || v >= this.length)
						return false;
					this.splice(v, 1);
					return true;
				},
				writable: false,
				enumerable: false,
				configurable: false
			},
			'replace': {
				value: function (n, o) {
					if (typeof o !== 'number')
						o = this.indexOf(o);
					if (o < 0 || v >= this.length)
						return false;
					this[o] = n;
					return true;
				}
			},
			'position': {
				value: function (v) {
					var p = this.indexOf(v);
					return p < 0 ? undefined : p;
				},
				writable: false,
				enumerable: false,
				configurable: false
			},
			'insertBefore': {
				value: function (n, r) {
					if (typeof r !== 'number')
						r = this.indexOf(r);
					if (r < 0 || r >= this.length)
						return false;
					this.splice(r, 0, n);
					return true;
				}
			}

		});
		if (arguments.length > 1) {
			for (var i = 0, l = arguments.length; i < l; ++i)
				this.push(arguments[i]);
		} else if (arguments.length === 1) {
			var length = arguments[0];
			if (length < 0 || length > Math.pow(2, 32) - 1)
				throw new RangeError('Invalid array length: ' + length);
			for (var i = 0; i < length; ++i)
				this.push(undefined);
		}
	}
	ExtArr.prototype = Array.prototype;

	module.exports = ExtArr;
 })()